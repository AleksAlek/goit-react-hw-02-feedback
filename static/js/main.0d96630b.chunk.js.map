{"version":3,"sources":["components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.jsx","App.jsx","index.js"],"names":["Section","title","children","className","FeedbackOptions","handleFeedback","options","map","option","classes","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","App","state","this","totalCount","countTotalFeedback","Math","round","type","setState","prevState","totalStatistic","countPositiveFeedbackPercentage","bind","message","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iWAaeA,EATC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,sBAAKC,UAAU,iBAAf,UACE,oBAAIA,UAAU,QAAd,SAAuBF,IACtBC,MCgBQE,G,MApBS,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,QACzC,OACE,qBAAKH,UAAU,qBAAf,SACGG,EAAQC,KAAI,SAACC,GACZ,IAAMC,EAAU,mBAAqBD,EAErC,OACE,wBACEL,UAAWM,EAEXC,QAAS,kBAAML,EAAeG,IAHhC,SAKGA,GAHIA,UCKFG,G,MAdI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,sBAAKb,UAAU,uBAAf,UACE,oBAAGA,UAAU,2BAAb,mBAA+CS,KAC/C,oBAAGT,UAAU,8BAAb,sBAAqDU,KACrD,oBAAGV,UAAU,0BAAb,kBAA6CW,KAC7C,oBAAGX,UAAU,4BAAb,oBAAiDY,KACjD,oBAAGZ,UAAU,iCAAb,gCACsBa,EAAqBA,EAAqB,IAAM,UCL7DC,G,YAHM,kBACnB,qBAAKd,UAAU,eAAf,iCC2Dae,E,4MAtDbC,MAAQ,CACNP,KAAM,EACNC,QAAS,EACTC,IAAK,G,wDAGP,WACE,OAAOM,KAAKD,MAAMP,KAAOQ,KAAKD,MAAMN,QAAUO,KAAKD,MAAML,M,6CAG3D,WACE,IAAMO,EAAaD,KAAKE,qBAExB,OAAOC,KAAKC,MAAyB,IAAlBJ,KAAKD,MAAMP,KAAcS,K,4BAG9C,SAAeI,GACbL,KAAKM,UAAS,SAACC,GAAD,sBAAmBF,EAAOE,EAAUF,GAAQ,Q,oBAG5D,WACE,IAAQpB,EAA0Be,KAA1Bf,eAAgBc,EAAUC,KAAVD,MAChBP,EAAuBO,EAAvBP,KAAMC,EAAiBM,EAAjBN,QAASC,EAAQK,EAARL,IAEjBc,EAAiBR,KAAKE,qBACtBN,EAAqBI,KAAKS,kCAEhC,OACE,qCACE,cAAC,EAAD,CAAS5B,MAAM,6BAAf,SACE,cAAC,EAAD,CACEK,QAAS,CAAC,OAAQ,UAAW,OAC7BD,eAAgBA,EAAeyB,KAAKV,UAIxC,cAAC,EAAD,CAASnB,MAAM,aAAf,SACG2B,EACC,cAAC,EAAD,CACEhB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOa,EACPZ,mBAAoBA,IAGtB,cAAC,EAAD,CAAce,QAAQ,+B,GA/ChBC,a,MCHlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.0d96630b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./Section.styles.css\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <div className=\"main-container\">\r\n      <h2 className=\"title\">{title}</h2>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\n\r\nimport \"./FeedbackOptions.styles.css\";\r\n\r\nconst FeedbackOptions = ({ handleFeedback, options }) => {\r\n  return (\r\n    <div className=\"controls-container\">\r\n      {options.map((option) => {\r\n        const classes = \"control control-\" + option;\r\n\r\n        return (\r\n          <button\r\n            className={classes}\r\n            key={option}\r\n            onClick={() => handleFeedback(option)}\r\n          >\r\n            {option}\r\n          </button>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\n\r\nimport \"./Statistics.styles.css\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <div className=\"statistics-container\">\r\n      <p className=\"statistic statistic-good\">Good: {good}</p>\r\n      <p className=\"statistic statistic-neutral\">Neutral: {neutral}</p>\r\n      <p className=\"statistic statistic-bad\">Bad: {bad}</p>\r\n      <p className=\"statistic statistic-total\">Total: {total}</p>\r\n      <p className=\"statistic statistic-percentage\">\r\n        Positive feedback: {positivePercentage ? positivePercentage + \"%\" : 0}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\r\n\r\nimport \"./Notification.styles.css\";\r\n\r\nconst Notification = () => (\r\n  <div className=\"notification\">No feedback given</div>\r\n);\r\nexport default Notification;\r\n","import React, { Component } from \"react\";\n\nimport Section from \"./components/Section/Section\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Statistics from \"./components/Statistics/Statistics\";\n\nimport \"./App.css\";\nimport Notification from \"./components/Notification/Notification\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback() {\n    return this.state.good + this.state.neutral + this.state.bad;\n  }\n\n  countPositiveFeedbackPercentage() {\n    const totalCount = this.countTotalFeedback();\n\n    return Math.round((this.state.good * 100) / totalCount);\n  }\n\n  handleFeedback(type) {\n    this.setState((prevState) => ({ [type]: prevState[type] + 1 }));\n  }\n\n  render() {\n    const { handleFeedback, state } = this;\n    const { good, neutral, bad } = state;\n\n    const totalStatistic = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage();\n\n    return (\n      <>\n        <Section title=\"Please leave your feedback\">\n          <FeedbackOptions\n            options={[\"good\", \"neutral\", \"bad\"]}\n            handleFeedback={handleFeedback.bind(this)} //Без этого падает рендер\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {totalStatistic ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={totalStatistic}\n              positivePercentage={positivePercentage}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}