{"version":3,"sources":["components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.jsx","App.jsx","index.js"],"names":["Section","title","children","className","FeedbackOptions","handleFeedback","options","map","option","classes","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","this","totalCount","countTotalFeedback","Math","round","type","setState","prevState","totalStatistic","countPositiveFeedbackPercentage","bind","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iWAoBeA,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,sBAAKC,UAAU,iBAAf,UACE,oBAAIA,UAAU,QAAd,SAAuBF,IACtBC,MCqBQE,G,MAzBS,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,QACzC,OACE,qBAAKH,UAAU,qBAAf,SACGG,EAAQC,KAAI,SAACC,GACZ,IAAMC,EAAU,mBAAqBD,EAErC,OACE,wBACEL,UAAWM,EAEXC,QAAS,kBAAML,EAAeG,IAHhC,SAKGA,GAHIA,UCaFG,G,MAtBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,sBAAKb,UAAU,uBAAf,UACE,oBAAGA,UAAU,2BAAb,mBAA+CS,KAC/C,oBAAGT,UAAU,8BAAb,sBAAqDU,KACrD,oBAAGV,UAAU,0BAAb,kBAA6CW,KAC7C,oBAAGX,UAAU,4BAAb,oBAAiDY,KACjD,oBAAGZ,UAAU,iCAAb,gCACsBa,EAAqBA,EAAqB,IAAM,UCA7DC,G,MARM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACnB,qBAAKf,UAAU,eAAf,SAA+Be,MCyDlBC,G,kNAtDbC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,wDAGP,WACE,OAAOO,KAAKD,MAAMR,KAAOS,KAAKD,MAAMP,QAAUQ,KAAKD,MAAMN,M,6CAG3D,WACE,IAAMQ,EAAaD,KAAKE,qBAExB,OAAOC,KAAKC,MAAyB,IAAlBJ,KAAKD,MAAMR,KAAcU,K,4BAG9C,SAAeI,GACbL,KAAKM,UAAS,SAACC,GAAD,sBAAmBF,EAAOE,EAAUF,GAAQ,Q,oBAG5D,WACE,IAAQrB,EAA0BgB,KAA1BhB,eAAgBe,EAAUC,KAAVD,MAChBR,EAAuBQ,EAAvBR,KAAMC,EAAiBO,EAAjBP,QAASC,EAAQM,EAARN,IAEjBe,EAAiBR,KAAKE,qBACtBP,EAAqBK,KAAKS,kCAEhC,OACE,qCACE,cAAC,EAAD,CAAS7B,MAAM,6BAAf,SACE,cAAC,EAAD,CACEK,QAAS,CAAC,OAAQ,UAAW,OAC7BD,eAAgBA,EAAe0B,KAAKV,UAIxC,cAAC,EAAD,CAASpB,MAAM,aAAf,SACG4B,EACC,cAAC,EAAD,CACEjB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOc,EACPb,mBAAoBA,IAGtB,cAAC,EAAD,CAAcE,QAAQ,+B,GA/ChBc,c,MCHlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4e60cf1e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nimport \"./Section.styles.css\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <div className=\"main-container\">\r\n      <h2 className=\"title\">{title}</h2>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.element.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\n\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nimport \"./FeedbackOptions.styles.css\";\r\n\r\nconst FeedbackOptions = ({ handleFeedback, options }) => {\r\n  return (\r\n    <div className=\"controls-container\">\r\n      {options.map((option) => {\r\n        const classes = \"control control-\" + option;\r\n\r\n        return (\r\n          <button\r\n            className={classes}\r\n            key={option}\r\n            onClick={() => handleFeedback(option)}\r\n          >\r\n            {option}\r\n          </button>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  handleFeedback: PropTypes.func.isRequired,\r\n  options: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\n\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nimport \"./Statistics.styles.css\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <div className=\"statistics-container\">\r\n      <p className=\"statistic statistic-good\">Good: {good}</p>\r\n      <p className=\"statistic statistic-neutral\">Neutral: {neutral}</p>\r\n      <p className=\"statistic statistic-bad\">Bad: {bad}</p>\r\n      <p className=\"statistic statistic-total\">Total: {total}</p>\r\n      <p className=\"statistic statistic-percentage\">\r\n        Positive feedback: {positivePercentage ? positivePercentage + \"%\" : 0}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\r\n\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nimport \"./Notification.styles.css\";\r\n\r\nconst Notification = ({ message }) => (\r\n  <div className=\"notification\">{message}</div>\r\n);\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component } from \"react\";\n\nimport Section from \"./components/Section/Section\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport Notification from \"./components/Notification/Notification\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback() {\n    return this.state.good + this.state.neutral + this.state.bad;\n  }\n\n  countPositiveFeedbackPercentage() {\n    const totalCount = this.countTotalFeedback();\n\n    return Math.round((this.state.good * 100) / totalCount);\n  }\n\n  handleFeedback(type) {\n    this.setState((prevState) => ({ [type]: prevState[type] + 1 }));\n  }\n\n  render() {\n    const { handleFeedback, state } = this;\n    const { good, neutral, bad } = state;\n\n    const totalStatistic = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage();\n\n    return (\n      <>\n        <Section title=\"Please leave your feedback\">\n          <FeedbackOptions\n            options={[\"good\", \"neutral\", \"bad\"]}\n            handleFeedback={handleFeedback.bind(this)} //Без этого падает рендер\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {totalStatistic ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={totalStatistic}\n              positivePercentage={positivePercentage}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}